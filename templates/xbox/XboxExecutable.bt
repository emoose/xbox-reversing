//------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
//    File: XboxExecutable.bt
//   Authors: emoose
//   Version: 1.0
//   Purpose: Map out Original Xbox Executable headers (XBE)
//  Category: Executable
// File Mask: *.xbe
//  ID Bytes: 58 42 45 48
//   History: Added header structs based on game symbols for Xbox 5849
//------------------------------------------------
// TODO: 
//  - Display XOR-decrypted kernel thunk/entrypoint in template view
//  - Display TitleName in template view
//  - Decode TitleID to string form?

DisplayFormatHex();

local uint XORKey_KernelThunks[3] = {
    0x5B6D40B6, // Retail
    0xEFB1F152, // Debug
    0x46437DCD // Beta
};
local uint XORKey_EntryPoint[3] = {
    0xA8FC57AB, // Retail
    0x94859D4B, // Debug
    0xE682F45B // Beta
};

local int XORKeyIndex = -1;

struct InitFlag
{
    DWORD MountUtilityDrive : 1;
    DWORD FormatUtilityDrive : 1;
    DWORD LimitDevkitMemory : 1;
    DWORD NoSetupHardDisk : 1;
    DWORD DontModifyHardDisk : 1;
    DWORD Unknown : 25;
    DWORD UtilityDriveClusterSize : 2; // 0 = 16K, 1 = 32K, 2 = 64K, 3 = 128K
};

typedef struct _XBEIMAGE_HEADER {
    DWORD Signature;
    UCHAR EncryptedDigest[256];
    DWORD BaseAddress;
    DWORD SizeOfHeaders;
    DWORD SizeOfImage;
    DWORD SizeOfImageHeader;
    time_t TimeDateStamp;
    DWORD CertificateOfs;
    DWORD NumberOfSections;
    DWORD SectionHeadersOfs;
    InitFlag InitFlags;
    DWORD AddressOfEntryPoint;
    DWORD TlsDirectoryOfs;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD NtBaseOfDll;
    DWORD NtSizeOfImage;
    DWORD NtCheckSum;
    time_t NtTimeDateStamp;
    DWORD DebugPathNameOfs;
    DWORD DebugFileNameOfs;
    DWORD DebugUnicodeFileNameOfs;
    DWORD XboxKernelThunkDataOfs;
    DWORD ImportDirectoryOfs;
    DWORD NumberOfLibraryVersions;
    DWORD LibraryVersionsOfs;
    DWORD XboxKernelLibraryVersionOfs;
    DWORD XapiLibraryVersionOfs;
    DWORD MicrosoftLogoOfs;
    DWORD SizeOfMicrosoftLogo;
    
    // XboxDevWiki "It only exists on XBEs built with an XDK version >= 5028."
    if (SizeOfImageHeader > 0x178)
        DWORD LibraryFeaturesOfs;
    if (SizeOfImageHeader > 0x17C)
        DWORD NumberOfLibraryFeatures;
        
    // XboxDevWiki "It only exists on XBEs built with an XDK version >= 5455."
    if (SizeOfImageHeader > 0x180)
        DWORD CodeViewDebugInfoOfs;    
} XBEIMAGE_HEADER;

typedef struct _XBEIMAGE_CERTIFICATE_KEY {
    BYTE Data[0x10];
} XBEIMAGE_CERTIFICATE_KEY;

struct MediaTypes
{
    DWORD HardDisk : 1;
    DWORD DVDX2 : 1;
    DWORD DVDCD : 1;
    DWORD CD : 1;
    DWORD DVD5_RO : 1;
    DWORD DVD9_RO : 1;
    DWORD DVD5_RW : 1;
    DWORD DVD9_RW : 1;
    DWORD Dongle : 1;
    DWORD MediaBoard : 1;
    DWORD Unknown : 20;
    DWORD NonSecureHardDisk : 1;
    DWORD NonSecureMode : 1;
};

struct Regions
{
    DWORD NorthAmerica : 1;
    DWORD Japan : 1;
    DWORD RestOfWorld : 1;
    DWORD Unknown : 28;
    DWORD Manufacturing : 1;
};

typedef struct _XBEIMAGE_CERTIFICATE {
    DWORD SizeOfCertificate;
    time_t TimeDateStamp;
    DWORD TitleID;
    WORD TitleName[40];
    DWORD AlternateTitleIDs[16];
    MediaTypes AllowedMediaTypes;
    Regions GameRegion;
    DWORD GameRatings;
    DWORD DiskNumber;
    DWORD Version;
    XBEIMAGE_CERTIFICATE_KEY LANKey;
    XBEIMAGE_CERTIFICATE_KEY SignatureKey;
    XBEIMAGE_CERTIFICATE_KEY AlternateSignatureKeys[16];
    DWORD OriginalSizeOfCertificate;
    DWORD OnlineServiceName;
} XBEIMAGE_CERTIFICATE;

struct SectionFlag
{
    DWORD Writeable : 1;
    DWORD Preload : 1;
    DWORD Executable : 1;
    DWORD InsertFile : 1;
    DWORD HeadPageReadOnly : 1;
    DWORD TailPageReadOnly : 1;
    DWORD Unknown : 26;
};

typedef struct _XBEIMAGE_SECTION
{
    SectionFlag SectionFlags;
    DWORD VirtualAddress;
    DWORD VirtualSize;
    DWORD PointerToRawData;
    DWORD SizeOfRawData;
    DWORD SectionNameOfs;
    DWORD SectionReferenceCount;
    DWORD HeadSharedPageReferenceCountOfs;
    DWORD TailSharedPageReferenceCountOfs;
    UCHAR SectionDigest[0x14];
    
    local long pos = FTell();
    FSeek(SectionNameOfs - Header.BaseAddress);
    string SectionName;
    FSeek(pos);
} XBEIMAGE_SECTION<read=ReadSection>;

string ReadSection( XBEIMAGE_SECTION& f )
{  
    return f.SectionName;
}

uint VAToOffset(uint va)
{
    if (va < Header.BaseAddress)
        return va;
    
    local int i = 0;
    local uint section_end = 0;
    if (Header.SectionHeadersOfs)
    {
        for(i = 0; i < Header.NumberOfSections; i++)
        {
            section_end = Sections[i].VirtualAddress + Sections[i].VirtualSize;
            if (Sections[i].VirtualAddress > va || va >= section_end)
                continue;
            return (va - Sections[i].VirtualAddress) + Sections[i].PointerToRawData;
        }
    }
    
    return va - Header.BaseAddress;
}

typedef struct _XBEIMAGE_LIBRARY_VERSION {
    CHAR LibraryName[8];
    WORD MajorVersion;
    WORD MinorVersion;
    WORD BuildVersion;
    WORD QFEVersion : 13;
    WORD ApprovedLibrary : 2;
    WORD DebugBuild : 1;
} XBEIMAGE_LIBRARY_VERSION<read=ReadLibraryVersion>;

string ReadLibraryVersion( XBEIMAGE_LIBRARY_VERSION& f )
{  
    string s;
    SPrintf( s, "%s v%d.%d.%d.%d", f.LibraryName, f.MajorVersion, f.MinorVersion, f.BuildVersion, f.QFEVersion);
    if (f.ApprovedLibrary == 0)
        s += " (Unapproved)";
    if (f.ApprovedLibrary == 1)
        s += " (Conditionally Approved)";
    //if (f.ApprovedLibrary == 2)
    //    s += " (Approved)";
    if (f.DebugBuild)
        s += " (Debug)";
    return s;
}

typedef struct _CV_INFO_PDB70
{
    DWORD CvSignature;
    BYTE Guid[0x10];
    DWORD Age;
    string PdbFileName;
} CV_INFO_PDB70<read=ReadCodeViewInfo>;

string ReadCodeViewInfo( CV_INFO_PDB70& f )
{  
    return f.PdbFileName;
}

typedef struct _IMAGE_TLS_DIRECTORY
{
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
} IMAGE_TLS_DIRECTORY;

XBEIMAGE_HEADER Header;
if (Header.CertificateOfs)
{
    FSeek(Header.CertificateOfs - Header.BaseAddress);
    XBEIMAGE_CERTIFICATE Certificate;
}

if (Header.SectionHeadersOfs)
{
    FSeek(Header.SectionHeadersOfs - Header.BaseAddress);
    XBEIMAGE_SECTION Sections[Header.NumberOfSections]<optimize=false>;
}

if (Header.DebugPathNameOfs)
{
    FSeek(VAToOffset(Header.DebugPathNameOfs));
    string DebugPathName;
}

if (Header.DebugFileNameOfs)
{
    FSeek(VAToOffset(Header.DebugFileNameOfs));
    string DebugFileName;
}

if (Header.DebugUnicodeFileNameOfs)
{
    FSeek(VAToOffset(Header.DebugUnicodeFileNameOfs));
    wstring DebugUnicodeFileName;
}

if (Header.LibraryVersionsOfs)
{
    FSeek(VAToOffset(Header.LibraryVersionsOfs));
    XBEIMAGE_LIBRARY_VERSION LibraryVersions[Header.NumberOfLibraryVersions];
}

if (Header.XboxKernelLibraryVersionOfs)
{
    FSeek(VAToOffset(Header.XboxKernelLibraryVersionOfs));
    XBEIMAGE_LIBRARY_VERSION KernelLibraryVersion;
}
if (Header.XapiLibraryVersionOfs)
{
    FSeek(VAToOffset(Header.XapiLibraryVersionOfs));
    XBEIMAGE_LIBRARY_VERSION XapiLibraryVersion;
}
if (Header.SizeOfImageHeader > 0x17C && Header.LibraryFeaturesOfs)
{
    FSeek(VAToOffset(Header.LibraryFeaturesOfs));
    XBEIMAGE_LIBRARY_VERSION LibraryFeatures[Header.NumberOfLibraryFeatures];
}
if (Header.SizeOfImageHeader > 0x180 && Header.CodeViewDebugInfoOfs)
{
    FSeek(VAToOffset(Header.CodeViewDebugInfoOfs));
    CV_INFO_PDB70 CodeViewDebugInfo;
}
if (Header.MicrosoftLogoOfs)
{
    FSeek(VAToOffset(Header.MicrosoftLogoOfs));
    BYTE MicrosoftLogo[Header.SizeOfMicrosoftLogo];
}
if (Header.TlsDirectoryOfs)
{
    FSeek(VAToOffset(Header.TlsDirectoryOfs));
    IMAGE_TLS_DIRECTORY TlsDirectory;    
}

local uint ExeAddressStart = Header.BaseAddress;
local uint ExeAddressEnd = ExeAddressStart + Header.SizeOfImage;
local int i = 0;
local uint ActualKernelThunk = 0;
local uint ActualEntryPoint = 0;

for(i = 0; i < 3; i++)
{
    ActualKernelThunk = Header.XboxKernelThunkDataOfs ^ XORKey_KernelThunks[i];
    if (ActualKernelThunk >= ExeAddressStart && ActualKernelThunk + 4 < ExeAddressEnd)
    {
        ActualEntryPoint = Header.AddressOfEntryPoint ^ XORKey_EntryPoint[i];
        XORKeyIndex = i;
        break;
    }
    ActualKernelThunk = 0;
}

if (XORKeyIndex == 0)
    Printf("[+] Retail encrypted\n");
else if (XORKeyIndex == 1)
    Printf("[+] Debug encrypted\n");
else if (XORKeyIndex == 2)
    Printf("[+] Beta encrypted\n");
else
    Printf("[+] Unknown encryption!\n");
    
if (ActualKernelThunk)
    Printf("[+] XboxKernelThunkData Address: 0x%x\n", ActualKernelThunk);
if (ActualEntryPoint)
    Printf("[+] AddressOfEntryPoint: 0x%x\n", ActualEntryPoint);
    
string KernelThunkName(DWORD id)
{    
    if (id == 1) return "AvGetSavedDataAddress";
    if (id == 2) return "AvSendTVEncoderOption";
    if (id == 3) return "AvSetDisplayMode";
    if (id == 4) return "AvSetSavedDataAddress";
    if (id == 5) return "DbgBreakPoint";
    if (id == 6) return "DbgBreakPointWithStatus";
    if (id == 7) return "DbgLoadImageSymbols";
    if (id == 8) return "DbgPrint";
    if (id == 9) return "HalReadSMCTrayState";
    if (id == 10) return "DbgPrompt";
    if (id == 11) return "DbgUnLoadImageSymbols";
    if (id == 12) return "ExAcquireReadWriteLockExclusive";
    if (id == 13) return "ExAcquireReadWriteLockShared";
    if (id == 14) return "ExAllocatePool";
    if (id == 15) return "ExAllocatePoolWithTag";
    if (id == 16) return "ExEventObjectType";
    if (id == 17) return "ExFreePool";
    if (id == 18) return "ExInitializeReadWriteLock";
    if (id == 19) return "ExInterlockedAddLargeInteger";
    if (id == 20) return "ExInterlockedAddLargeStatistic";
    if (id == 21) return "ExInterlockedCompareExchange64";
    if (id == 22) return "ExMutantObjectType";
    if (id == 23) return "ExQueryPoolBlockSize";
    if (id == 24) return "ExQueryNonVolatileSetting";
    if (id == 25) return "ExReadWriteRefurbInfo";
    if (id == 26) return "ExRaiseException";
    if (id == 27) return "ExRaiseStatus";
    if (id == 28) return "ExReleaseReadWriteLock";
    if (id == 29) return "ExSaveNonVolatileSetting";
    if (id == 30) return "ExSemaphoreObjectType";
    if (id == 31) return "ExTimerObjectType";
    if (id == 32) return "ExfInterlockedInsertHeadList";
    if (id == 33) return "ExfInterlockedInsertTailList";
    if (id == 34) return "ExfInterlockedRemoveHeadList";
    if (id == 35) return "FscGetCacheSize";
    if (id == 36) return "FscInvalidateIdleBlocks";
    if (id == 37) return "FscSetCacheSize";
    if (id == 38) return "HalClearSoftwareInterrupt";
    if (id == 39) return "HalDisableSystemInterrupt";
    if (id == 40) return "HalDiskCachePartitionCount";
    if (id == 41) return "HalDiskModelNumber";
    if (id == 42) return "HalDiskSerialNumber";
    if (id == 43) return "HalEnableSystemInterrupt";
    if (id == 44) return "HalGetInterruptVector";
    if (id == 45) return "HalReadSMBusValue";
    if (id == 46) return "HalReadWritePCISpace";
    if (id == 47) return "HalRegisterShutdownNotification";
    if (id == 48) return "HalRequestSoftwareInterrupt";
    if (id == 49) return "HalReturnToFirmware";
    if (id == 50) return "HalWriteSMBusValue";
    if (id == 51) return "InterlockedCompareExchange";
    if (id == 52) return "InterlockedDecrement";
    if (id == 53) return "InterlockedIncrement";
    if (id == 54) return "InterlockedExchange";
    if (id == 55) return "InterlockedExchangeAdd";
    if (id == 56) return "InterlockedFlushSList";
    if (id == 57) return "InterlockedPopEntrySList";
    if (id == 58) return "InterlockedPushEntrySList";
    if (id == 59) return "IoAllocateIrp";
    if (id == 60) return "IoBuildAsynchronousFsdRequest";
    if (id == 61) return "IoBuildDeviceIoControlRequest";
    if (id == 62) return "IoBuildSynchronousFsdRequest";
    if (id == 63) return "IoCheckShareAccess";
    if (id == 64) return "IoCompletionObjectType";
    if (id == 65) return "IoCreateDevice";
    if (id == 66) return "IoCreateFile";
    if (id == 67) return "IoCreateSymbolicLink";
    if (id == 68) return "IoDeleteDevice";
    if (id == 69) return "IoDeleteSymbolicLink";
    if (id == 70) return "IoDeviceObjectType";
    if (id == 71) return "IoFileObjectType";
    if (id == 72) return "IoFreeIrp";
    if (id == 73) return "IoInitializeIrp";
    if (id == 74) return "IoInvalidDeviceRequest";
    if (id == 75) return "IoQueryFileInformation";
    if (id == 76) return "IoQueryVolumeInformation";
    if (id == 77) return "IoQueueThreadIrp";
    if (id == 78) return "IoRemoveShareAccess";
    if (id == 79) return "IoSetIoCompletion";
    if (id == 80) return "IoSetShareAccess";
    if (id == 81) return "IoStartNextPacket";
    if (id == 82) return "IoStartNextPacketByKey";
    if (id == 83) return "IoStartPacket";
    if (id == 84) return "IoSynchronousDeviceIoControlRequest";
    if (id == 85) return "IoSynchronousFsdRequest";
    if (id == 86) return "IofCallDriver";
    if (id == 87) return "IofCompleteRequest";
    if (id == 88) return "KdDebuggerEnabled";
    if (id == 89) return "KdDebuggerNotPresent";
    if (id == 90) return "IoDismountVolume";
    if (id == 91) return "IoDismountVolumeByName";
    if (id == 92) return "KeAlertResumeThread";
    if (id == 93) return "KeAlertThread";
    if (id == 94) return "KeBoostPriorityThread";
    if (id == 95) return "KeBugCheck";
    if (id == 96) return "KeBugCheckEx";
    if (id == 97) return "KeCancelTimer";
    if (id == 98) return "KeConnectInterrupt";
    if (id == 99) return "KeDelayExecutionThread";
    if (id == 100) return "KeDisconnectInterrupt";
    if (id == 101) return "KeEnterCriticalRegion";
    if (id == 102) return "MmGlobalData";
    if (id == 103) return "KeGetCurrentIrql";
    if (id == 104) return "KeGetCurrentThread";
    if (id == 105) return "KeInitializeApc";
    if (id == 106) return "KeInitializeDeviceQueue";
    if (id == 107) return "KeInitializeDpc";
    if (id == 108) return "KeInitializeEvent";
    if (id == 109) return "KeInitializeInterrupt";
    if (id == 110) return "KeInitializeMutant";
    if (id == 111) return "KeInitializeQueue";
    if (id == 112) return "KeInitializeSemaphore";
    if (id == 113) return "KeInitializeTimerEx";
    if (id == 114) return "KeInsertByKeyDeviceQueue";
    if (id == 115) return "KeInsertDeviceQueue";
    if (id == 116) return "KeInsertHeadQueue";
    if (id == 117) return "KeInsertQueue";
    if (id == 118) return "KeInsertQueueApc";
    if (id == 119) return "KeInsertQueueDpc";
    if (id == 120) return "KeInterruptTime";
    if (id == 121) return "KeIsExecutingDpc";
    if (id == 122) return "KeLeaveCriticalRegion";
    if (id == 123) return "KePulseEvent";
    if (id == 124) return "KeQueryBasePriorityThread";
    if (id == 125) return "KeQueryInterruptTime";
    if (id == 126) return "KeQueryPerformanceCounter";
    if (id == 127) return "KeQueryPerformanceFrequency";
    if (id == 128) return "KeQuerySystemTime";
    if (id == 129) return "KeRaiseIrqlToDpcLevel";
    if (id == 130) return "KeRaiseIrqlToSynchLevel";
    if (id == 131) return "KeReleaseMutant";
    if (id == 132) return "KeReleaseSemaphore";
    if (id == 133) return "KeRemoveByKeyDeviceQueue";
    if (id == 134) return "KeRemoveDeviceQueue";
    if (id == 135) return "KeRemoveEntryDeviceQueue";
    if (id == 136) return "KeRemoveQueue";
    if (id == 137) return "KeRemoveQueueDpc";
    if (id == 138) return "KeResetEvent";
    if (id == 139) return "KeRestoreFloatingPointState";
    if (id == 140) return "KeResumeThread";
    if (id == 141) return "KeRundownQueue";
    if (id == 142) return "KeSaveFloatingPointState";
    if (id == 143) return "KeSetBasePriorityThread";
    if (id == 144) return "KeSetDisableBoostThread";
    if (id == 145) return "KeSetEvent";
    if (id == 146) return "KeSetEventBoostPriority";
    if (id == 147) return "KeSetPriorityProcess";
    if (id == 148) return "KeSetPriorityThread";
    if (id == 149) return "KeSetTimer";
    if (id == 150) return "KeSetTimerEx";
    if (id == 151) return "KeStallExecutionProcessor";
    if (id == 152) return "KeSuspendThread";
    if (id == 153) return "KeSynchronizeExecution";
    if (id == 154) return "KeSystemTime";
    if (id == 155) return "KeTestAlertThread";
    if (id == 156) return "KeTickCount";
    if (id == 157) return "KeTimeIncrement";
    if (id == 158) return "KeWaitForMultipleObjects";
    if (id == 159) return "KeWaitForSingleObject";
    if (id == 160) return "KfRaiseIrql";
    if (id == 161) return "KfLowerIrql";
    if (id == 162) return "KiBugCheckData";
    if (id == 163) return "KiUnlockDispatcherDatabase";
    if (id == 164) return "LaunchDataPage";
    if (id == 165) return "MmAllocateContiguousMemory";
    if (id == 166) return "MmAllocateContiguousMemoryEx";
    if (id == 167) return "MmAllocateSystemMemory";
    if (id == 168) return "MmClaimGpuInstanceMemory";
    if (id == 169) return "MmCreateKernelStack";
    if (id == 170) return "MmDeleteKernelStack";
    if (id == 171) return "MmFreeContiguousMemory";
    if (id == 172) return "MmFreeSystemMemory";
    if (id == 173) return "MmGetPhysicalAddress";
    if (id == 174) return "MmIsAddressValid";
    if (id == 175) return "MmLockUnlockBufferPages";
    if (id == 176) return "MmLockUnlockPhysicalPage";
    if (id == 177) return "MmMapIoSpace";
    if (id == 178) return "MmPersistContiguousMemory";
    if (id == 179) return "MmQueryAddressProtect";
    if (id == 180) return "MmQueryAllocationSize";
    if (id == 181) return "MmQueryStatistics";
    if (id == 182) return "MmSetAddressProtect";
    if (id == 183) return "MmUnmapIoSpace";
    if (id == 184) return "NtAllocateVirtualMemory";
    if (id == 185) return "NtCancelTimer";
    if (id == 186) return "NtClearEvent";
    if (id == 187) return "NtClose";
    if (id == 188) return "NtCreateDirectoryObject";
    if (id == 189) return "NtCreateEvent";
    if (id == 190) return "NtCreateFile";
    if (id == 191) return "NtCreateIoCompletion";
    if (id == 192) return "NtCreateMutant";
    if (id == 193) return "NtCreateSemaphore";
    if (id == 194) return "NtCreateTimer";
    if (id == 195) return "NtDeleteFile";
    if (id == 196) return "NtDeviceIoControlFile";
    if (id == 197) return "NtDuplicateObject";
    if (id == 198) return "NtFlushBuffersFile";
    if (id == 199) return "NtFreeVirtualMemory";
    if (id == 200) return "NtFsControlFile";
    if (id == 201) return "NtOpenDirectoryObject";
    if (id == 202) return "NtOpenFile";
    if (id == 203) return "NtOpenSymbolicLinkObject";
    if (id == 204) return "NtProtectVirtualMemory";
    if (id == 205) return "NtPulseEvent";
    if (id == 206) return "NtQueueApcThread";
    if (id == 207) return "NtQueryDirectoryFile";
    if (id == 208) return "NtQueryDirectoryObject";
    if (id == 209) return "NtQueryEvent";
    if (id == 210) return "NtQueryFullAttributesFile";
    if (id == 211) return "NtQueryInformationFile";
    if (id == 212) return "NtQueryIoCompletion";
    if (id == 213) return "NtQueryMutant";
    if (id == 214) return "NtQuerySemaphore";
    if (id == 215) return "NtQuerySymbolicLinkObject";
    if (id == 216) return "NtQueryTimer";
    if (id == 217) return "NtQueryVirtualMemory";
    if (id == 218) return "NtQueryVolumeInformationFile";
    if (id == 219) return "NtReadFile";
    if (id == 220) return "NtReadFileScatter";
    if (id == 221) return "NtReleaseMutant";
    if (id == 222) return "NtReleaseSemaphore";
    if (id == 223) return "NtRemoveIoCompletion";
    if (id == 224) return "NtResumeThread";
    if (id == 225) return "NtSetEvent";
    if (id == 226) return "NtSetInformationFile";
    if (id == 227) return "NtSetIoCompletion";
    if (id == 228) return "NtSetSystemTime";
    if (id == 229) return "NtSetTimerEx";
    if (id == 230) return "NtSignalAndWaitForSingleObjectEx";
    if (id == 231) return "NtSuspendThread";
    if (id == 232) return "NtUserIoApcDispatcher";
    if (id == 233) return "NtWaitForSingleObject";
    if (id == 234) return "NtWaitForSingleObjectEx";
    if (id == 235) return "NtWaitForMultipleObjectsEx";
    if (id == 236) return "NtWriteFile";
    if (id == 237) return "NtWriteFileGather";
    if (id == 238) return "NtYieldExecution";
    if (id == 239) return "ObCreateObject";
    if (id == 240) return "ObDirectoryObjectType";
    if (id == 241) return "ObInsertObject";
    if (id == 242) return "ObMakeTemporaryObject";
    if (id == 243) return "ObOpenObjectByName";
    if (id == 244) return "ObOpenObjectByPointer";
    if (id == 245) return "ObpObjectHandleTable";
    if (id == 246) return "ObReferenceObjectByHandle";
    if (id == 247) return "ObReferenceObjectByName";
    if (id == 248) return "ObReferenceObjectByPointer";
    if (id == 249) return "ObSymbolicLinkObjectType";
    if (id == 250) return "ObfDereferenceObject";
    if (id == 251) return "ObfReferenceObject";
    if (id == 252) return "PhyGetLinkState";
    if (id == 253) return "PhyInitialize";
    if (id == 254) return "PsCreateSystemThread";
    if (id == 255) return "PsCreateSystemThreadEx";
    if (id == 256) return "PsQueryStatistics";
    if (id == 257) return "PsSetCreateThreadNotifyRoutine";
    if (id == 258) return "PsTerminateSystemThread";
    if (id == 259) return "PsThreadObjectType";
    if (id == 260) return "RtlAnsiStringToUnicodeString";
    if (id == 261) return "RtlAppendStringToString";
    if (id == 262) return "RtlAppendUnicodeStringToString";
    if (id == 263) return "RtlAppendUnicodeToString";
    if (id == 264) return "RtlAssert";
    if (id == 265) return "RtlCaptureContext";
    if (id == 266) return "RtlCaptureStackBackTrace";
    if (id == 267) return "RtlCharToInteger";
    if (id == 268) return "RtlCompareMemory";
    if (id == 269) return "RtlCompareMemoryUlong";
    if (id == 270) return "RtlCompareString";
    if (id == 271) return "RtlCompareUnicodeString";
    if (id == 272) return "RtlCopyString";
    if (id == 273) return "RtlCopyUnicodeString";
    if (id == 274) return "RtlCreateUnicodeString";
    if (id == 275) return "RtlDowncaseUnicodeChar";
    if (id == 276) return "RtlDowncaseUnicodeString";
    if (id == 277) return "RtlEnterCriticalSection";
    if (id == 278) return "RtlEnterCriticalSectionAndRegion";
    if (id == 279) return "RtlEqualString";
    if (id == 280) return "RtlEqualUnicodeString";
    if (id == 281) return "RtlExtendedIntegerMultiply";
    if (id == 282) return "RtlExtendedLargeIntegerDivide";
    if (id == 283) return "RtlExtendedMagicDivide";
    if (id == 284) return "RtlFillMemory";
    if (id == 285) return "RtlFillMemoryUlong";
    if (id == 286) return "RtlFreeAnsiString";
    if (id == 287) return "RtlFreeUnicodeString";
    if (id == 288) return "RtlGetCallersAddress";
    if (id == 289) return "RtlInitAnsiString";
    if (id == 290) return "RtlInitUnicodeString";
    if (id == 291) return "RtlInitializeCriticalSection";
    if (id == 292) return "RtlIntegerToChar";
    if (id == 293) return "RtlIntegerToUnicodeString";
    if (id == 294) return "RtlLeaveCriticalSection";
    if (id == 295) return "RtlLeaveCriticalSectionAndRegion";
    if (id == 296) return "RtlLowerChar";
    if (id == 297) return "RtlMapGenericMask";
    if (id == 298) return "RtlMoveMemory";
    if (id == 299) return "RtlMultiByteToUnicodeN";
    if (id == 300) return "RtlMultiByteToUnicodeSize";
    if (id == 301) return "RtlNtStatusToDosError";
    if (id == 302) return "RtlRaiseException";
    if (id == 303) return "RtlRaiseStatus";
    if (id == 304) return "RtlTimeFieldsToTime";
    if (id == 305) return "RtlTimeToTimeFields";
    if (id == 306) return "RtlTryEnterCriticalSection";
    if (id == 307) return "RtlUlongByteSwap";
    if (id == 308) return "RtlUnicodeStringToAnsiString";
    if (id == 309) return "RtlUnicodeStringToInteger";
    if (id == 310) return "RtlUnicodeToMultiByteN";
    if (id == 311) return "RtlUnicodeToMultiByteSize";
    if (id == 312) return "RtlUnwind";
    if (id == 313) return "RtlUpcaseUnicodeChar";
    if (id == 314) return "RtlUpcaseUnicodeString";
    if (id == 315) return "RtlUpcaseUnicodeToMultiByteN";
    if (id == 316) return "RtlUpperChar";
    if (id == 317) return "RtlUpperString";
    if (id == 318) return "RtlUshortByteSwap";
    if (id == 319) return "RtlWalkFrameChain";
    if (id == 320) return "RtlZeroMemory";
    if (id == 321) return "XboxEEPROMKey";
    if (id == 322) return "XboxHardwareInfo";
    if (id == 323) return "XboxHDKey";
    if (id == 324) return "XboxKrnlVersion";
    if (id == 325) return "XboxSignatureKey";
    if (id == 326) return "XeImageFileName";
    if (id == 327) return "XeLoadSection";
    if (id == 328) return "XeUnloadSection";
    if (id == 329) return "READ_PORT_BUFFER_UCHAR";
    if (id == 330) return "READ_PORT_BUFFER_USHORT";
    if (id == 331) return "READ_PORT_BUFFER_ULONG";
    if (id == 332) return "WRITE_PORT_BUFFER_UCHAR";
    if (id == 333) return "WRITE_PORT_BUFFER_USHORT";
    if (id == 334) return "WRITE_PORT_BUFFER_ULONG";
    if (id == 335) return "XcSHAInit";
    if (id == 336) return "XcSHAUpdate";
    if (id == 337) return "XcSHAFinal";
    if (id == 338) return "XcRC4Key";
    if (id == 339) return "XcRC4Crypt";
    if (id == 340) return "XcHMAC";
    if (id == 341) return "XcPKEncPublic";
    if (id == 342) return "XcPKDecPrivate";
    if (id == 343) return "XcPKGetKeyLen";
    if (id == 344) return "XcVerifyPKCS1Signature";
    if (id == 345) return "XcModExp";
    if (id == 346) return "XcDESKeyParity";
    if (id == 347) return "XcKeyTable";
    if (id == 348) return "XcBlockCrypt";
    if (id == 349) return "XcBlockCryptCBC";
    if (id == 350) return "XcCryptService";
    if (id == 351) return "XcUpdateCrypto";
    if (id == 352) return "RtlRip";
    if (id == 353) return "XboxLANKey";
    if (id == 354) return "XboxAlternateSignatureKeys";
    if (id == 355) return "XePublicKeyData";
    if (id == 356) return "HalBootSMCVideoMode";
    if (id == 357) return "IdexChannelObject";
    if (id == 358) return "HalIsResetOrShutdownPending";
    if (id == 359) return "IoMarkIrpMustComplete";
    if (id == 360) return "HalInitiateShutdown";
    if (id == 361) return "RtlSnprintf";
    if (id == 362) return "RtlSprintf";
    if (id == 363) return "RtlVsnprintf";
    if (id == 364) return "RtlVsprintf";
    if (id == 365) return "HalEnableSecureTrayEject";
    if (id == 366) return "HalWriteSMCScratchRegister";
    if (id == 367) return "Undefined_0";
    if (id == 368) return "Undefined_1";
    if (id == 369) return "Undefined_2";
    if (id == 370) return "XProfpControl";
    if (id == 371) return "XProfpGetData";
    if (id == 372) return "IrtClientInitFast";
    if (id == 373) return "IrtSweep";
    if (id == 374) return "MmDbgAllocateMemory";
    if (id == 375) return "MmDbgFreeMemory";
    if (id == 376) return "MmDbgQueryAvailablePages";
    if (id == 377) return "MmDbgReleaseAddress";
    if (id == 378) return "MmDbgWriteCheck";
    
    return "UnknownThunk";
}

string ReadKernelThunk(DWORD Thunk)
{
    if (Thunk == 0) return "EndOfKernelThunks";
    
    string ThunkName = "InvalidThunk";
    if ((Thunk & 0xF0000000) == 0x80000000)
    {
        Thunk = Thunk & 0xFFFF;
        ThunkName = KernelThunkName(Thunk);
    }
        
    string s;
    SPrintf(s, "0x%03X = %s", Thunk, ThunkName);
    return s;
}
    
struct Thunks
{
    local int i = 0;
    for(i = 0; i < 400; i++) // there's only ~380 thunks, so we'll read 400 max
    {
        DWORD KernelThunk<read=ReadKernelThunk>;
        if (KernelThunk == 0)
            break;
    }
};

if (ActualKernelThunk)
{
    FSeek(VAToOffset(ActualKernelThunk));
    Thunks KernelThunks;
}